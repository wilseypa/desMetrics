
%{

//package lexer
package main

import "os"
import "bufio"

// tokens
const (
	EOF int = iota
	COLON int = iota
	COMMA int = iota
	L_BRACKET int = iota
	R_BRACKET int = iota
	L_CURLY int = iota
	R_CURLY int = iota
	STRING int = iota
	NUMBER int = iota

	SIMULATOR_NAME int = iota
	MODEL_NAME int = iota
	CAPTURE_DATE int = iota
	COMMAND_LINE_ARGS int = iota
	EVENTS int = iota
	SEND_LP int = iota
	SEND_TIME int = iota
	RECEIVE_LP int = iota
	RECEIVE_TIME int = iota
)

var inputCharacter byte
var inputFile *bufio.Reader
var inputBuffer []byte
var headCharacter byte

var fileLineNo int

func ScanInit(fileName *os.File) {
	inputFile = bufio.NewReader(fileName)
	fileLineNo = 1
	inputCharacter = getc()
	return
}

func getc() byte {
	if headCharacter != 0 {
		inputBuffer = append(inputBuffer, headCharacter)
	}
	headCharacter = 0
	if b, err := inputFile.ReadByte(); err == nil {
		headCharacter = b
	}
	return headCharacter
}

func Scan() (int, []byte) {

%}

%yyc inputCharacter
%yyn inputCharacter = getc()

%%

	inputBuffer = inputBuffer[:0]


<*>\0	return EOF, inputBuffer

[ \t]

[\n\r]+	fileLineNo++

":"	return COLON, inputBuffer
","	return COMMA, inputBuffer
"["	return L_BRACKET, inputBuffer
"]"	return R_BRACKET, inputBuffer
"{"	return L_CURLY, inputBuffer
"}"	return R_CURLY, inputBuffer

\"[sS][iI][mM][uU][lL][aA][tT][oO][rR]_[nN][aA][mM][eE]\"
	return SIMULATOR_NAME, inputBuffer
\"[mM][oO][dD][eE][lL]_[nN][aA][mM][eE]\"
	return MODEL_NAME, inputBuffer
\"[cC][aA][pP][tT][uU][rR][eE]_[dD][aA][tT][eE]\"
	return CAPTURE_DATE, inputBuffer
\"[cC][oO][mM][mM][aA][nN][dD]_[lL][iI][nN][eE]_[aA][rR][gG][uU][mM][eE][nN][tT][sS]\"
	return COMMAND_LINE_ARGS, inputBuffer

\"[eE][vV][eE][nN][tT][sS]\"
	return EVENTS, inputBuffer
\"[sS][lL][pP]\"
	return SEND_LP, inputBuffer
\"[sS][tT][sS]\"
	return SEND_TIME, inputBuffer
\"[rR][lL][pP]\"
	return RECEIVE_LP, inputBuffer
\"[rR][tT][sS]\"
	return RECEIVE_TIME, inputBuffer

\"[^\"]*\"	return STRING, inputBuffer
\'[^\']*\'	return STRING, inputBuffer

[0-9]+(\.[0-9]*)?(e([+-])?[0-9]+)?
		return NUMBER, inputBuffer

%%

return EOF, inputBuffer

}

