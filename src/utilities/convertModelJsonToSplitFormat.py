
# USAGE:  python convertModelJsonToSplitFormat.py infile.json outdir

# this utility program converts the csv event tracefile generated by the warped2 kernel
# into a json file that is required by the desAnalysis program.  to use, run the warped
# simulation model with these arguments (in addition to whatever else is normally used): 
#  --statistics-type csv --statistics-file warpedCsvFile.csv 

import os
import argparse
import sys
import json
import csv
import time

#--------------------------------------------------------------------------------
# process command line arguments

# process the arguments on the command line
args = argparse.ArgumentParser(description='Convert the integrated event data file from a single integrated json file to the new version with a split files: one defining the model configuration (json) and one containing the raw events (csv)')

#args.add_argument('--delta', type=float, help='Distance from x=y plane to filter (default=0.0).')
args.add_argument('-o', '--outDir', default='conversionDir', help='Directory to place converted files (default: conversionDir)')
args.add_argument('inFile', default='desTraceFile.json', help='Filename of old model data (default: desTraceFile.json)')

args=args.parse_args()

#--------------------------------------------------------------------------------
# create a directory to write output file

if not os.path.exists(args.outDir):
    os.makedirs(args.outDir)

#--------------------------------------------------------------------------------
# read the json file

# read the json file
json_data = open(args.inFile)
model_summary = json.load(json_data)

#--------------------------------------------------------------------------------
# write the model data as a json file

jsonInfo = {}
jsonInfo['simulator_name'] = model_summary['simulator_name']
jsonInfo['model_name'] = model_summary['model_name']
jsonInfo['original_capture_date'] = model_summary['capture_date']
jsonInfo['capture_history'] = str(sys.argv) + ', ' + time.strftime("%c"), model_summary['command_line_arguments']
jsonInfo['event_data'] = {'file_name' : 'eventTraceData.csv', 'format' : ['sLP', 'sTS', 'rLP', 'rTS']}

with open(args.outDir + '/modelInfo.json', 'w') as outFile :
    outFile.write(json.dumps(jsonInfo, indent=4, sort_keys=False))

#--------------------------------------------------------------------------------
# dump out the event data as a csv file

with open(args.outDir + '/eventTraceData.csv', 'w') as csvFile :
    csvWriter = csv.writer(csvFile)
    for event in model_summary["events"] :
        csvWriter.writerow(event)

